from time import gmtime, strftime
from datetime import datetime

# -*- coding: utf-8 -*-
"""
Automatic code generated by FoV Sweep Configurator tool
It creates a python script that commands the sweep actions and
triggers the frame acquistion shots for the configured FoV 
scanning action.
It is base (apart from python) in OpenCv.
To be successfully executed, you must provide local functions 
to give to this script the exact information needed (video source number)
and the functions to move the motors, this must included in a custom
module called "sweepsupport".
"""

import cv2
import sqlite3
import sweepsupport as sws
import urllib

def import_URL(URL):
    exec urllib.urlopen(URL).read() in globals()

####### Functions API ################

### Commands the motor to the position of that step
def commandMotor(x,y):
    if (sws.cte_verbose):
      print ("Sweep step X: " + str(x) + " Y: " + str(y))
      return sws.commandMotor(x,y)

### Investigate if the current step has been executed
### you can also include here the user interaction, allowing
### him/her to quit the scanning operation
def stepDone():
    # Wait for command or step time
    # returns are:
    #   -1 if the sweep operation must be cancelled
    #   1 if the step has been done and the frame must be acquired
    #   0 does nothing, non blocking implementation is welcome
    return sws.stepDone()

sqlsentence ="INSERT INTO \\"sweep_ex_logs\\" (\\"step\\", \\"x\\", \\"y\\", \\"x_coord\\", \\"y_coord\\", \\"m1\\", \\"m2\\", \\"m3\\", \\"m1_fdback\\", \\"m2_fdback\\", \\"m3_fdback\\", \\"timestr\\", \\"sweep_eng_run_id\\", \\"dtinit\\", \\"dtend\\", \\"created_at\\", \\"updated_at\\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "

sqlprepare="CREATE TABLE IF NOT EXISTS \\"sweep_ex_logs\\" (\\"id\\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \\"m1\\" float, \\"m2\\" float, \\"m3\\" float, \\"created_at\\" datetime, \\"updated_at\\" datetime, \\"sweep_eng_run_id\\" integer, \\"step\\" integer, \\"x\\" integer, \\"y\\" integer, \\"x_coord\\" float, \\"y_coord\\" float, \\"timestr\\" varchar, \\"dtinit\\" datetime, \\"dtend\\" datetime, \\"m1_fdback\\" float, \\"m2_fdback\\" float, \\"m3_fdback\\" float);"

def dbinsert(dbc, curStep, stepX, stepY,stepXcoord,stepYcoord,m1,m2,m3,m1_fdback,m2_fdback,m3_fdback,timestr,dtinit,dtcam):
    item = [curStep,stepX,stepY,stepXcoord,stepYcoord,m1,m2,m3,m1_fdback,m2_fdback,m3_fdback,timestr,
            sweep_ex_id,dtinit,dtcam,dtcam,dtcam]
    dbc.execute(sqlsentence,item)
    return True
    
def dbprepare(dbc):
    dbc.execute(sqlprepare)
    return True	
	
###### END Functions ############

###### Automatically generated code ###########
sweep_ex_id = <%= @sweep_ex.id.to_s %>
steps = [ <%= raw(@sweep_ex.step_list_py) %> ]

###### Automatically generated steps table ###########
###### END Automatically generated code ###########


#### START EXECUTION ######

# Prepare the scan loop
curStep=0
done=0
# Create timestamp
timestr=strftime("%Y%m%d%H%M%S", gmtime())

# Cam has the video source
cam = cv2.VideoCapture(sws.cte_camsource)

if (sws.cte_verbose):
  print ("Camera resolution:")
  print ("* Horizontal: " + str(cam.get(cv2.CAP_PROP_FRAME_WIDTH)))
  print ("* Vertical: "+ str(cam.get(cv2.CAP_PROP_FRAME_HEIGHT)))

# Prepare the Database
db = sqlite3.connect('./db/log.sqlite3')
if not(db):
    ret = False
else:
    ret = True
    dbc = db.cursor()
    ret=dbprepare(dbc)
    
if (ret==False):
    done = -1
    print "Database ERROR! Aborting"

# Steps loop
# until ESC key is pressed
# or steps have finished
endStep = len(steps)
#endStep = 4
while (done!=-1 and curStep <%= raw("<") %> endStep ):
    # In stepX and stepY we have the step positions to be done
    stepX=steps[curStep]['x']
    stepY=steps[curStep]['y']
    stepXcoord=steps[curStep]['x_coord']
    stepYcoord=steps[curStep]['y_coord']
    # Command motor position for this step
    dtinit = datetime.now()
    done,m1,m2,m3=commandMotor(stepXcoord,stepYcoord)
    # Wait command to end
    while (done==0):
      done=stepDone();
    # END Command motor position for this step    
    if (done!=-1):
      # Acquire image
      dtcam = datetime.now()
      ret, frame = cam.read()
      #save to disk
      strg=sws.cte_fileprefix+'%s_%03d_%03d.png' % (timestr, sweep_ex_id, curStep)
      cv2.imwrite(sws.cte_framePath + strg, frame)
      #show the image
      cv2.imshow('Current Frame', frame)
      # acquire the motor status
      m1_fdback,m2_fdback,m3_fdback = sws.motorPositions()
      print ("Motores | m1: "+str(m1_fdback)+", m2: "+str(m2_fdback)+", m3: "+str(m3_fdback))
      # Envío la info a la web
      #r = requests.post("http://localhost:3000/sweep_eng_runs/1/sweep_ex_logs/new", data={'sweep_ex_log': {"sweep_eng_run_id":"1", "a":"6", "b":"8", "c":"9"},"sweep_eng_run_id":"1" })
      #print(r.status_code, r.reason)
      # Envío la info a la BD
      done=dbinsert(dbc,curStep, stepX, stepY,stepXcoord, stepYcoord,m1,m2,m3,m1_fdback,m2_fdback,m3_fdback,timestr,dtinit,dtcam)
      curStep += 1
        
# End of program, steps have finished or someone has cancelled the scan process
if (curStep <%= raw("<") %> len(steps)):
  # Scan process was cancelled
  if (sws.cte_verbose):
    print ("Scan process was cancelled")
    dummy=0 # Dummy for avoiding indentation failures

db.commit()
db.close()
cam.release()
cv2.destroyAllWindows()
sws.motorClose()
