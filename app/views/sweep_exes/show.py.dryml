# -*- coding: utf-8 -*-
"""
Automatic code generated by FoV Sweep Configurator tool
It creates a python script that commands the sweep actions and
triggers the frame acquistion shots for the configured FoV 
scanning action.
It is base (apart from python) in OpenCv.
To be successfully executed, you must provide local functions 
to give to this script the exact information needed (video source number)
and the functions to move the motors, this must included in a custom
module called "sweepsupport".
"""

import cv2
import sqlite3
import sweepsupport as sws

####### Functions API ################

### Commands the motor to the position of that step
def commandMotor(x,y):
    if (sws.cte_verbose):
      print ("Sweep step X: " + str(x) + " Y: " + str(y))
      sws.commandMotor(x,y)

### Investigate if the current step has been executed
### you can also include here the user interaction, allowing
### him/her to quit the scanning operation
def stepDone():
    # Wait for command or step time
    # returns are:
    #   -1 if the sweep operation must be cancelled
    #   1 if the step has been done and the frame must be acquired
    #   0 does nothing, non blocking implementation is welcome
    return sws.stepDone()

###### END Functions ############

###### Automatically generated steps table ###########


steps = [ <%= raw(@sweep_ex.step_list_py) %> ]

###### Automatically generated steps table ###########


#### START EXECUTION ######

# Cam has the video source
cam = cv2.VideoCapture(sws.cte_camsource)

if (sws.cte_verbose):
  print ("Camera resolution:")
  print ("* Horizontal: " + str(cam.get(cv2.CAP_PROP_FRAME_WIDTH)))
  print ("* Vertical: "+ str(cam.get(cv2.CAP_PROP_FRAME_HEIGHT)))
  dummy=0 # Dummy for avoiding indentation failures

curStep=0
done=0
# Steps loop
# until ESC key is pressed
# or steps have finished
while (done!=-1 and curStep <%= raw("<") %> len(steps)):
    # In stepX and stepY we have the step positions to be done
    stepX=steps[curStep]['x']
    stepY=steps[curStep]['y']
    # Command motor position for this step
    commandMotor(stepX,stepY)
    # Wait command to end
    done=0
    while (done==0):
      done=stepDone();
    # END Command motor position for this step    
    if (done!=-1):
      # Acquire image
      ret, frame = cam.read()
      #save to disk
      strg=sws.cte_fileprefix+'%03d_%03d_%03d.png' % (curStep, stepX, stepY)
      cv2.imwrite(sws.cte_framePath + strg, frame)
      #show the image
      cv2.imshow('Current Frame', frame)
      # acquire the motor status
      a,b,c = sws.motorPositions()
      print ("Motores | a: "+str(a)+", b: "+str(b)+", c: "+str(c))

    curStep += 1
        
# End of program, steps have finished or someone has cancelled the scan process
if (curStep <%= raw("<") %> len(steps)):
  # Scan process was cancelled
  if (sws.cte_verbose):
    print ("Scan process was cancelled")
    dummy=0 # Dummy for avoiding indentation failures

cam.release()
cv2.destroyAllWindows()